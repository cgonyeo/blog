<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gonblag</title><link>http://blog.gonyeo.com/</link><description></description><atom:link href="http://blog.gonyeo.com/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 19 Mar 2014 16:30:00 -0400</lastBuildDate><item><title>Commarch</title><link>http://blog.gonyeo.com/hfoss-commarch.html</link><description>&lt;p&gt;This is my response to the assignment located at
&lt;a href="http://hfoss-fossrit.rhcloud.com/static/hw/commarch.txt"&gt;http://hfoss-fossrit.rhcloud.com/static/hw/commarch.txt&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We chose to analyze the systemd project. We did have problems running
git-by-a-bus, as the systemd project is rather large. After 20 hours and about
30 GB of memory, I gave up on running the project. Information has instead been
gathered from Github's graphs on the project.&lt;/p&gt;
&lt;h3&gt;Links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;IRC: #systemd on irc.freenode.org&lt;/li&gt;
&lt;li&gt;Source Code Repository: &lt;a href="http://cgit.freedesktop.org/systemd/systemd/"&gt;http://cgit.freedesktop.org/systemd/systemd/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;General Development Mailing List Archive:
&lt;a href="http://lists.freedesktop.org/archives/systemd-devel/"&gt;http://lists.freedesktop.org/archives/systemd-devel/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Various documentation is listed on this page:
&lt;a href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;http://www.freedesktop.org/wiki/Software/systemd/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Project Website:
&lt;a href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;http://www.freedesktop.org/wiki/Software/systemd/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Answers&lt;/h3&gt;
&lt;p&gt;Describe software project, its purpose and goals.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Systemd is a system and service manager for Linux. It aims to replace init, to do
this in an aggressively parallel manner, and to be a drop in replacement for
sysvinit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Give brief history of the project. When was the Initial Commit? The latest
commit?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The first commit was on April 26, 2005, and the most recent commit on the
mainline was a few hours ago. The git history suggests that there were several
independent branches that became one central systemd.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Who approves patches? How many people? &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Patches are approved through and by the systemd mailing list.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Who has commit access, or has had patches accepted?  How many total?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;16 people have direct commit access.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Who has the highest amounts of "Unique Knowledge?" (As per your "Git-by-a-bus"
report. If there is a tie, list each contributor, with links if possible)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Git-by-a-bus was unable to run due to the size of the repository. Based on the
commit graphs in Github, Lennart Poettering and Kay Sievers would have the most
intimate knowledge with the internals of the project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What is your project's "Calloway Coefficient of Fail?"&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Looks like the systemd guys are on top of their game, they have a 0 coefficient of fail.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Has there been any turnover in the Core Team? (i.e. has the same top 20% of
contributors stayed the same over time? If not, how has it changed?)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It does not appear that there has been any turnover in the core team.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Does the project have a BDFL, or Lead Developer? (BDFL == Benevolent Dictator
for Life)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The lead developers appear to be Lennart Poettering and Kay Sievers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Are the front and back end developers the same people? What is the proportion of
each?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Systemd is a low level codebase entirely written in C&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What have been some of the major bugs/problems/issues that have arisen during
development? Who is responsible for quality control and bug repair?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TODOs are handled through the mailing list, the github issue tracker is not
used. The core mailing list is responsible for quality control and bug repair.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How is the project's participation trending and why?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It would appear that the project’s activity has increased in the past few
months.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In your opinion, does the project pass "The Raptor Test?" (i.e. Would the
project survive if the BDFL, or most active contributor were eaten by a
Velociraptor?) Why or why not?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There appears to be two people with a massive amount of contributions to the
project, so if one of them were to be eaten by a velociraptor, the other one
would probably be able to carry on&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In your opinion, would the project survive if the core team, or most active 20%
of contributors, were hit by a bus? Why or why not?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Based on the contributor graphs on Github, definitely not. There are two people
who own the majority of the commits to the project, and then about another 8 who
own almost all the rest, out of 274 contributors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Does the project have an official "on-boarding" process in place?  (new
contributor guides, quickstarts, communication leads who focus specifically on
newbies, etc...) &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is documentation for “Developers”, though this is more “documentation for
people using systemd for handling their code”. There is not a lot of
documentation for developers of systemd itself, except for the “systemd-devel”
mailing list.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Does the project have Documentation available? Is it extensive?  Does it include
code examples?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a decent amount of documentation, including example usage and
configuration settings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you were going to contribute to this project, but ran into trouble or hit
blockers, who would you contact, and how?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The best places to ask questions would be in the IRC channel (#systemd on
Freenode), the mailing list, or the Google+ community&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Based on these answers, how would you describe the decision making
structure/process of this group?  Is it hierarchical, consensus building, ruled
by a small group, barely contained chaos, or ruled by a single or pair of
individuals?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It’s controlled by some linux wizards and their mailing list. The mailing list
is archived and well documented but you need to be a part of that community if
you want to contribute&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Is this the kind of structure you would enjoy working in? Why, or why not?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Joining the developers seems to have a difficult start, and the majority of work
from people outside the core developer group involves sending the patches to a
mailing list, which is also used for discussion about usage and development.
These are factors that could be considered a large turn-off from new growth.&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Derek Gonyeo</dc:creator><pubDate>Wed, 19 Mar 2014 16:30:00 -0400</pubDate><guid>tag:blog.gonyeo.com,2014-03-19:hfoss-commarch.html</guid><category>hfoss</category></item><item><title>HFOSS Team Proposal</title><link>http://blog.gonyeo.com/hfoss-team-proposal.html</link><description>&lt;p&gt;For the commarch assignment, I will be working with Matt Soucy and Dylan Ayrey.
I will be tasked with getting &lt;a href="https://github.com/tomheon/git_by_a_bus"&gt;Git by a
bus&lt;/a&gt;, calculating the &lt;a href="http://hfoss-fossrit.rhcloud.com/static/books/tomspotcallaway-howtotellifyourfossprojectisdoomedtofail.pdf"&gt;Callaway
Coefficient of
Fail&lt;/a&gt;,
and answering the corresponding questions under part 4. The others will do the
remaining questions in the assignment.&lt;/p&gt;
&lt;p&gt;For our project, we will be analyzing the
&lt;a href="http://freedesktop.org/wiki/Software/systemd/"&gt;Systemd&lt;/a&gt; community. Systemd is
described as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Systemd&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;handles&lt;/span&gt; &lt;span class="n"&gt;daemonization&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt;
&lt;span class="n"&gt;parallelization&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We will be able to communicate with the project via their mailing list at
&lt;a href="http://lists.freedesktop.org/mailman/listinfo/systemd-devel"&gt;http://lists.freedesktop.org/mailman/listinfo/systemd-devel&lt;/a&gt;,
and via their IRC channel #systemd on Freenode. &lt;/p&gt;
&lt;p&gt;The easy parts will probably be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Git&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;bus&lt;/span&gt; 
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Callaway&lt;/span&gt; &lt;span class="n"&gt;Coefficient&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;Fail&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Describe&lt;/span&gt; &lt;span class="n"&gt;software&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;its&lt;/span&gt; &lt;span class="n"&gt;purpose&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;goals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The hard parts will probably be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Detecting&lt;/span&gt; &lt;span class="n"&gt;turnover&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt; &lt;span class="n"&gt;team&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Determining&lt;/span&gt; &lt;span class="n"&gt;raptor&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bus&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Does&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;official&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;on-boarding&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hard parts can probably be resolved easily enough by asking questions in irc
channels, and git by a bus may help highlight some interesting dynamics of the
community.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Derek Gonyeo</dc:creator><pubDate>Wed, 12 Mar 2014 23:59:00 -0400</pubDate><guid>tag:blog.gonyeo.com,2014-03-12:hfoss-team-proposal.html</guid><category>hfoss</category></item><item><title>Civic hacking for great FOSS</title><link>http://blog.gonyeo.com/hfoss-civic-checkin.html</link><description>&lt;p&gt;For class last week we attended the check-in for the AT&amp;amp;T Rochester Civic App 
Hackathon. During it Remy Decausemaker went over the goals and rules of the 
hackathon, and participants gave short talks on what they were working on and
what kind of people they were looking for to help. &lt;/p&gt;
&lt;p&gt;There were some cool ideas there, but the one that caught my attention most was
an app to help bus goers. The premise was that a real-time schedule for when
buses would arrive would be very nice, but the company running the buses won't
release an api for this. To circumvent this, this app was being developed. It
would crowdsource this information; if people ran this app, and it had at least
one person on a reasonable amount of buses, then the current location and
schedule of the buses would be available.&lt;/p&gt;
&lt;p&gt;This is an event I'd love to have participated in (particularly seeing the
prizes and apparent small pool of people participating), but I have far too many
things to do to get involved in a 2 month long hackathon. At least Hack Upstate
in Syracuse will be happening in about a month.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Derek Gonyeo</dc:creator><pubDate>Mon, 10 Mar 2014 16:00:00 -0400</pubDate><guid>tag:blog.gonyeo.com,2014-03-10:hfoss-civic-checkin.html</guid><category>hfoss</category></item><item><title>Making a pull request for great FOSS</title><link>http://blog.gonyeo.com/hfoss-pull-request.html</link><description>&lt;p&gt;For the assignment &lt;a href="http://hfoss-fossrit.rhcloud.com/hw/bugfix"&gt;bugfix&lt;/a&gt; I
was tasked with finding an open source project, and making a pull request to it.
This could be anything from fixing a typo to addig major functionality. I had
grand ambitions of adding a load balancer to
&lt;a href="https://github.com/hudl/fargo"&gt;Fargo&lt;/a&gt;, which is a client for Netflix's
&lt;a href="https://github.com/Netflix/eureka"&gt;Eureka&lt;/a&gt;. Right now, it just randomly selects
a server, but could do fancy things basd on geography, remembering which servers
it failed to connect to, and other things. As an added bonus, I could practice
my go.&lt;/p&gt;
&lt;p&gt;Alas, I did not expect to run in to one of my old rivals: Ruby. The language has
a burning hatred towards me for no good reason, and the tool recommended to me
to provision the vms was &lt;a href="http://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt;. As is typical for
most things I attempt to use in Ruby, I spent multiple days to get it working
and ultimately was only able to get it to barely work. In the end it locked both
me and itself out of my vms for no apparent reason and I gave up.&lt;/p&gt;
&lt;p&gt;After my multi-day vagrant saga, I was still left with my assignment to
complete. Luckily Ryan Brown and Ross Delinger have been working on a cool
little project called &lt;a href="https://github.com/ryansb/legowebservices"&gt;Lego Web
Services&lt;/a&gt;. There was a file called
m.go, that could use some clarification. I added a little one line comment to
rectify this, and made a &lt;a href="https://github.com/ryansb/legowebservices/pull/5"&gt;pull
request&lt;/a&gt; with the change,
which was promptly accepted. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Derek Gonyeo</dc:creator><pubDate>Mon, 03 Mar 2014 14:00:00 -0500</pubDate><guid>tag:blog.gonyeo.com,2014-03-03:hfoss-pull-request.html</guid><category>hfoss</category></item><item><title>FFTs in ODD</title><link>http://blog.gonyeo.com/ffts-in-odd.html</link><description>&lt;p&gt;So in &lt;a href="http://blog.gonyeo.com/category/odd.html"&gt;Project ODD&lt;/a&gt; I handle sound. I 
use an audio splitter to take any sound going to my speakers, and pass it in to
a USB audio dongle I have on the Raspberry Pi that powers the project. The Pi
then generates some animations based upon the audio.&lt;/p&gt;
&lt;p&gt;The most simple of these animations turns on all of the LEDs and varies their
brightness with the volume of the sound. This is a cool proof of concept, but
lacks the pretty visualizations I'm aiming for, as it's not very easy to see
subtle variations in the volume level with this strategy.&lt;/p&gt;
&lt;p&gt;The next attempt made a bar, who's length and brightness varies with the volume
level (volume again because getting that is easy). Anchored to one end, the LEDs
will light up for a certain length towards the other end, and as the music gets
louder or quieter the number of LEDs would respectively grow or shrink. This
made a cool pulsing effect, that's interesting to look at and results in a
pulsing light cast on things around it. When combined with the "Set All"
animation as a weak background, it can be quite enjoyable.&lt;/p&gt;
&lt;p&gt;From there I went on to use FFTs to break down the audio coming in, and
calculate which frequencies are present in the music. The goal being I can
display a spectograph across the LEDs, mapping one end of the strip to low
frequencies and as you move down the strip assigning the LEDs to higher
frequencies. This results in an animation wherein you can clearly see the
difference between the bass drum and vocals, and other sounds; something the
previous attempts fail to do. It also still results in the pulsing light on the
surrounding walls and ceiling. &lt;/p&gt;
&lt;p&gt;It took some time to have these animations workable; I had some conceptual
problems not understanding how to process sound. At first, I attempted to just
sum up all the values to get the sound, but I later realized half of these
values were negative. Each sample was a float, between -1 and 1. I them summed
up the absolute value of each sample, and was able to accurately get the average
sound across the sound buffer. &lt;/p&gt;
&lt;p&gt;Displaying this though, it didn't appear to move as well as I was expecting.
Upon conversing with another member of the Computer Science House, I learned
(remembered) that sound was logarithmic. I then scaled this volume
logarithmically and got a nice looking animation.&lt;/p&gt;
&lt;p&gt;The next step was using the FFTs; if I could understand what frequencies were in
my sound buffer I would have more information to display in an animation. After
reading a good bit about FFTs online I wasn't sure how to tweak it however.&lt;/p&gt;
&lt;p&gt;The various places across the internet I found can explain it much better than I
can, and I suggest googling around if you're interested in this stuff, but
pretty much what I ended up doing was having a buffer of 1024, not padding my
array with 0s, to fill in the buffer of answers I take the square root of the
sum of the sqaures (Pythagorean Theorem) from the two buffers I get as output.
The values I also get very much favor lower frequencies. While probably
accurate, this isn't what I want to show for the animation, so I apply an
exponential (going to try out a logarithmic scale soon, because apparently
that's what I actually want) to the sounds to make the higher frequencies
brighter. I also only look at the frequencies between 0 Hz and 1875 Hz (most
probably gonna start including some frequencies higher than that soon).&lt;/p&gt;
&lt;p&gt;All in all it's been fun playing around with the sound to see what looks good,
if not a slow process. I'm excited for when I can build a larger display to see
what having a higher resolutions will look like.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Derek Gonyeo</dc:creator><pubDate>Mon, 03 Mar 2014 03:00:00 -0500</pubDate><guid>tag:blog.gonyeo.com,2014-03-03:ffts-in-odd.html</guid><category>hfoss</category></item><item><title>Ceti Eel (An IRC bot in Go)</title><link>http://blog.gonyeo.com/ceti-eel.html</link><description>&lt;p&gt;The Computer Science House runs an IRC server, which is very popular over the
summer when everyone scatters to their various homes and jobs. It serves as a
connection to the social collective we leave behind during the summers, to save
us from having to focus on our actual jobs. It is on this IRC server that a
couple of times last summer some of our more chaotic members decided to enable
an "anarchy mode", wherein everyone on the server was given admin privileges.
Partly to practice my Go, I decided to write a bot to capitalize on this. I
present: &lt;a href="https://github.com/dgonyeo/ceti-eel"&gt;ceti eel&lt;/a&gt;. (Named after the eels 
used by Khan in Star trek to effectively mind control some guys).&lt;/p&gt;
&lt;p&gt;The bot sits in a channel and waits. When it receives admin privileges, or
receives op privileges and there are no admins in channel, it then immediately
de-ops and de-admins everyone else in the channel. If someone is made an op or
admin (probably by Chanserv), the bot will immediately reverse it. The point
being to take control of the channel and hold it. I can then rather have the bot
assign power out to who I choose, or make various demands of the channel.&lt;/p&gt;
&lt;p&gt;The demands portion of the bot hasn't been written yet, but I'm imagining
something like forcing everything someone says to include some profane word, or
to require a random member of the channel to profess their love to another
member. The penalty for failing to meet the demands within a certain time limit
can involve a loss of voice, or even kickbanning them.&lt;/p&gt;
&lt;p&gt;I used the library &lt;a href="https://github.com/thoj/go-ircevent"&gt;go-ircevent&lt;/a&gt; to
facilitate the IRC connection side of things, and it was actually pretty easy to
do. I just set up the connection to the server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;con&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;irc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IRC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myNick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;myNick&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then register callbacks for the events I care about:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AddCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;001&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;connectionMade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AddCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PRIVMSG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newPrivmsg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AddCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MODE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;modeChanged&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AddCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;353&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gotNames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and start the event loop for the server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From there I join the channel upon successfull connection, listen for things 
being said in the channel, listen for modes being changed, and listen for
answers to my requests for the list of everyone in channel. Going forward, it
should be easy to add functions I can call to generate the commands, and then
have functions to check if conditions have been met that I can call in a
seperate thread that'll sleep for a bit. We'll see how much chaos this can cause
this summer.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Derek Gonyeo</dc:creator><pubDate>Mon, 03 Mar 2014 02:30:00 -0500</pubDate><guid>tag:blog.gonyeo.com,2014-03-03:ceti-eel.html</guid><category>hfoss</category></item><item><title>Hudl and Go</title><link>http://blog.gonyeo.com/hudl-and-go.html</link><description>&lt;p&gt;Last Wednesday Ryan Brown gave a talk at RIT on his experiences migrating Hudl's
infrastructure away from Node.js to Go. A relatively unknown language, Go
simplifies the process of having concurrent code, with easy contructs to run
functions in new threads and with built in thread safe data structures. This has
allowed him to make Hudl's infrastructure more reliable, and have a shorter 
development time for new changes. &lt;/p&gt;
&lt;p&gt;Go is an interesting language; it's syntax is very losely based on C, but has
many changes to it. Semicolons are nonexistent, when declaring variables you
list the name and then the type, and the placement of curly braces are much more
specifically defined. Definitely something I'll be playing around in for a
while.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Derek Gonyeo</dc:creator><pubDate>Sat, 01 Mar 2014 16:00:00 -0500</pubDate><guid>tag:blog.gonyeo.com,2014-03-01:hudl-and-go.html</guid><category>hfoss</category></item><item><title>HFOSS Quiz 1</title><link>http://blog.gonyeo.com/hfoss-quiz.1.html</link><description>&lt;p&gt;&lt;strong&gt;What are the titles of each Pillar?&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open Exchange&lt;/li&gt;
&lt;li&gt;Participation&lt;/li&gt;
&lt;li&gt;Rapid Prototyping&lt;/li&gt;
&lt;li&gt;Meritocracy&lt;/li&gt;
&lt;li&gt;Community&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;What are the titles of each General Principle?&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make it interesting and make sure it happens&lt;/li&gt;
&lt;li&gt;Scratch an itch&lt;/li&gt;
&lt;li&gt;Minimize how many times you have to reinvent the wheel&lt;/li&gt;
&lt;li&gt;Solve problems through parallel work processess whenever possible&lt;/li&gt;
&lt;li&gt;Leverage the law of large numbers&lt;/li&gt;
&lt;li&gt;Document what you do&lt;/li&gt;
&lt;li&gt;Release early and release often&lt;/li&gt;
&lt;li&gt;Talk a lot&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;What are the similarities between Weber's eight principles, and the five
pillars?&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Both lists rely heavily on the fact that there's a lot of people involved in
the open source community. The pillars include an open exchange of ideas
between people, and the principles say to talk a lot, and document what you
do. Both of these emphasize the communication within this community, and
describe it's importance. The pillars also include participation, which is
effectively what the principle "Solve problems through parallel work
processess whenever possible" relies upon; through the participation of many
people, it is possible to solve problems concurrently. Additionally, the pillar 
of "Rapid Prototyping" and the principle of "Release early and release often"
are pretty much the same thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;What are the differences?&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The principles discuss the problems related to incentivizing people, most
obviously in the one titled "Make it interesting and make sure it happens". The
pillars don't touch on this, as if they assume that individuals are self or
outside modivated, and as such don't need a push from the organizers of these
open source projects to get involved; being involved would be its own reward.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Who's "keen analysis" did Weber "Draw Heavily" upon?&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Weber relied upon then keen analysis of Eric Raymond.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;What was the title of this "keen analysis."&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Cathedral and the Bazaar: Musings on Linux and Open Source by an Accidental
Revolutionary, published initially as an essay in 1997, and then as a book in
1999.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Where can this keen analysis be found?&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.catb.org/~esr/writings/homesteading/cathedral-bazaar/index.html"&gt;http://www.catb.org/~esr/writings/homesteading/cathedral-bazaar/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Derek Gonyeo</dc:creator><pubDate>Wed, 12 Feb 2014 18:00:00 -0500</pubDate><guid>tag:blog.gonyeo.com,2014-02-12:hfoss-quiz.1.html</guid><category>hfoss</category></item><item><title>Review of Chapter 3 from Websters Success of Open Source</title><link>http://blog.gonyeo.com/webster-lit-review.html</link><description>&lt;p&gt;As an assignment for the HFOSS course at RIT, I am to read the third chapter
from Webster's Success of Open Source. The following is my (albeit late) review
of the text.&lt;/p&gt;
&lt;p&gt;The chapter provides an overview of how the collaborative process in Open Source
works, why it works, and some of the key elements of its success. From its
conception in 1994, Linux has grown into a widely used operating system. During
this time, the collaborative process among the developers supporting it and
related projects has evolved into am impressive example of the kinds of progress
that can be made relying on free labor and the increased levels collaboration
the internet allows.&lt;/p&gt;
&lt;p&gt;The authors details eight principles that attempt to detail what people do in
the open source process. These principles are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;Make&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;interesting&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;sure&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;happens&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;Scratch&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;itch&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;Minimize&lt;/span&gt; &lt;span class="n"&gt;how&lt;/span&gt; &lt;span class="n"&gt;many&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;reinvent&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;wheel&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;Solve&lt;/span&gt; &lt;span class="n"&gt;problems&lt;/span&gt; &lt;span class="n"&gt;through&lt;/span&gt; &lt;span class="n"&gt;parallel&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="n"&gt;processes&lt;/span&gt; &lt;span class="n"&gt;whenever&lt;/span&gt; &lt;span class="n"&gt;possible&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;Leverage&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;law&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;large&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;Document&lt;/span&gt; &lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="n"&gt;Release&lt;/span&gt; &lt;span class="n"&gt;early&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;release&lt;/span&gt; &lt;span class="n"&gt;often&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="n"&gt;Talk&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;lot&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I found some of the data and graphs provided by the author interesting,
specifically the graphs detailing that Finland has the highest per capita
contributions to the open source cause. The principles laid out by the author
felt like a good summary of how to best understand what happens and know what to
expect when contributing to an open source project.&lt;/p&gt;
&lt;p&gt;I wasn't overly fond of some of the authors verbose language, and found myself
wishing he had instead opted to skip some of his example. I believe his ultimate
message was accurate however, so his examples ultimately serve as a means to
that end.&lt;/p&gt;
&lt;p&gt;I give this chapter 4 out of 5
&lt;a href="http://upload.wikimedia.org/wikipedia/commons/8/83/Blinkenlights-original.png"&gt;blinkenlights.&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Derek Gonyeo</dc:creator><pubDate>Mon, 10 Feb 2014 22:00:00 -0500</pubDate><guid>tag:blog.gonyeo.com,2014-02-10:webster-lit-review.html</guid><category>hfoss</category></item><item><title>Using Libjansson</title><link>http://blog.gonyeo.com/using-libjansson.html</link><description>&lt;p&gt;tl;dr: I go through a basic example of using libjansson to parse JSON in C. This
handles reading in and breaking down JSON, not making up some JSON to ship off
to somewhere else&lt;/p&gt;
&lt;p&gt;I was working on Project Odd, and got to the feature that involves controlling
the pi over the network. The basic idea is some client will connect to a socket,
send some data over to the pi, and thereby be able to control it. I debated
using libwebsockets to allow browsers to be able to easily do this, but decided
against it since I don't want to design this for a specific client.&lt;/p&gt;
&lt;p&gt;The data that will be sent will be comprised of some action (add an animation,
remove an animation, modify an animation), and then the corresponding data for
that animation (parameters of a new animation, the index of the animation to be
removed, the index of an animation and the name and value of a parameter to be
changed). For this I chose to use JSON, as I have some experience working with
it and JSON parsing libraries can be found on most, if not all platforms.&lt;/p&gt;
&lt;p&gt;From playing around with the source to
&lt;a href="https://github.com/ComputerScienceHouse/bingehack4"&gt;Bingehack4&lt;/a&gt; I had heard of
&lt;a href="http://www.digip.org/jansson/"&gt;libjansson&lt;/a&gt;, a library for C that handles
parsing JSON. Some googling had produced some simple 
&lt;a href="https://jansson.readthedocs.org/en/latest/index.html"&gt;docs and a tutorial&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;If you want to skip to the source of what I wrote, it should be available
&lt;a href="https://github.com/dgonyeo/odd/blob/master/computer_program/odd_network.c"&gt;here&lt;/a&gt;. 
The basics of how to use it are as follows.&lt;/p&gt;
&lt;p&gt;Make a new JSON_t * variable, this'll point to the root object we're going to
parse. Also make a JSON_error_t, which will be able to tell us where we had
problems reading the JSON, if there are any.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;JSON_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;JSON_error_t&lt;/span&gt; &lt;span class="n"&gt;JSONError&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now load in the JSON, passing in the address of the beginning of our buffer (in
this case a char *), some flags (I just passed in 0), and the location of where
to store errors&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON_loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;JSONError&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check for errors, which will occur if the string did not contain valid JSON&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;error: on line %d: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JSONError&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JSONError&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//break or exit or something, we can&amp;#39;t use the JSON&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next I want to check that what we have is an object. Depending on what you're
using this for, it could be something else, like an array.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;JSON_is_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Handle the error&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point we've loaded in our JSON, confirmed that it was valid JSON, and
confirmed that the JSON we loaded is an object. I wanted to store an action in
this, so let's get the action out of there.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;JSON_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;actionJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON_object_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And I intend for this to be a string (for readability). So let's confirm that we
have a string.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;JSON_is_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actionJson&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Handle the error&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ok, we have the action, and it's a string. Let's get a pointer to the actual
value of it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON_string_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actionJson&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'm now going to have some if statements to check this action string for some 
expected values. If it matches "add", I'm going to check for an object called
"animation".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;JSON_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;animationJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON_object_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;animation&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then pull some values out of it. Note that I'm passing animationJson in to
JSON_object_get(), instead of root.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//Let&amp;#39;s get the various parameters&lt;/span&gt;
&lt;span class="n"&gt;JSON_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;nameJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON_object_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animationJson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//String&lt;/span&gt;
&lt;span class="n"&gt;JSON_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;modifierJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON_object_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animationJson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;modifier&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//String&lt;/span&gt;
&lt;span class="n"&gt;JSON_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;paramsJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON_object_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animationJson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;params&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Array&lt;/span&gt;
&lt;span class="n"&gt;JSON_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;colorJsonArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON_object_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animationJson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;colors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Array&lt;/span&gt;

&lt;span class="c1"&gt;//Error checking&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;JSON_is_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nameJson&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Handle the error&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;JSON_is_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modifierJson&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Handle the error&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;JSON_is_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paramsJson&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Handle the error&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;JSON_is_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colorJsonArray&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Handle the error&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON_string_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nameJson&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON_string_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modifierJson&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So we grabbed a couple chars related to the animations, which we've seen how to
handle, but we also grabbed some arrays. Let's look at how to deal with those.&lt;/p&gt;
&lt;p&gt;We can grab the size of the array like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;paramCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON_array_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paramsJson&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which means iterating through it with a for loop is pretty simple. So let's do
that to grab some values from it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;JSON_array_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paramsJson&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;JSON_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tempJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON_array_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paramsJson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;JSON_is_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tempJson&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//Handle the error&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSON_number_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tempJson&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And there you have it, parsing JSON in C. Pulling values out of both objects and
arrays. If you have any questions you should check out the
&lt;a href="https://jansson.readthedocs.org/en/latest/apiref.html"&gt;documentation&lt;/a&gt;, as it
was pretty much my only resource for getting off the ground with libjansson.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Derek Gonyeo</dc:creator><pubDate>Wed, 05 Feb 2014 18:00:00 -0500</pubDate><guid>tag:blog.gonyeo.com,2014-02-05:using-libjansson.html</guid><category>hfoss</category><category>odd</category></item><item><title>Deploying Logstash</title><link>http://blog.gonyeo.com/deploying-logstash.html</link><description>&lt;p&gt;&lt;a href="ihttp://logstash.net/"&gt;Logstash&lt;/a&gt; is a program designed to collect, parse, and
store logs from Linux machines so that you can go through them and try to make
sense of them at a later date. I was tasked with deploying logstash on the
various computers that comprise the 
&lt;a href="http://csh.rit.edu/"&gt;Computer Science House's&lt;/a&gt; systems. This will detail the
steps I went through to do that.&lt;/p&gt;
&lt;p&gt;There's multiple parts to logstash, the shipper, indexer, and web interface.
They all work together to collect, parse, and show you logs, and logs travel
through them in the above order.&lt;/p&gt;
&lt;p&gt;The shipper is an instance of logstash that sits on a machine, and watches for 
new logs to be made. Upon finding these new logs, it grabs them and sends a copy
over to a &lt;a href="http://redis.io/"&gt;Redis&lt;/a&gt; instance somewhere. For the purpose of 
logstash, Redis is just a fancy queue. There will be a shipper running on every
computer you want to be viewing logs from, all talking to the same Redis
instace.&lt;/p&gt;
&lt;p&gt;Next the indexer (another instance of the same binary) takes these logs out of
Redis at the other end of the queue, and saves them in to
&lt;a href="http://www.elasticsearch.org/"&gt;Elasticsearch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally yet another instance of logstash sits on a machine, and serves up a web
page containing &lt;a href="http://www.elasticsearch.org/overview/kibana/"&gt;Kibana&lt;/a&gt; to view
and process these logs.&lt;/p&gt;
&lt;p&gt;The first problem arises in that you get a .jar file from logstash's website,
and are instructed to run it with different flags to get the different modes
working. This is all fine and good to test out logstash, but we need something
more akin to a service for this. Some quick googling had revealed these
&lt;a href="https://gist.github.com/jippi/1065761"&gt;init scripts&lt;/a&gt; set up to make the running
of logstash more automated&lt;/p&gt;
&lt;p&gt;Side Note: This was a couple months ago, and I'm not 100% positive those are 
the init scripts I used. Also I'm pretty sure those init scripts required some 
hacking on to get working, but I'll leave that as an exercise for the reader.&lt;/p&gt;
&lt;p&gt;Anywho, the configs were stored in /etc/logstash/logstash-{shipper|indexer},
the pid files stored in /var/run/logstash/logstash-{shipper|indexer|web}.pid,
the logs were stored in /var/log/logstash/logstash-{shipper|indexer|web}.log,
and the init scripts stored in
/etc/init.d/logstash/logstash-{shipper|indexer|web}.&lt;/p&gt;
&lt;p&gt;Another problem presented itself when I learned that Kibana uses the
Elasticsearch http apis to present the information to the user, and these are
not in any way secure. I'll edit this once I figure out what I'm going to do
about that.&lt;/p&gt;
&lt;p&gt;Here's the configs I used for logstash when deploying it on my personal machine:&lt;/p&gt;
&lt;p&gt;/etc/logstash/logstash-shipper&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;stdin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;stdin-type&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;syslog&amp;quot;&lt;/span&gt;

        &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/var/log/*.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/var/log/syslog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/var/lib/plexmediaserver/Library/Application Support/Plex Media Server/Logs&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;messages&amp;quot;&lt;/span&gt;

        &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/var/log/messages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;codec&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rubydebug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;redis&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;data_type&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;list&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;logstash&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tits123&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;/etc/logstash/logstash-indexer&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;redis&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;# these settings should match the output of the agent&lt;/span&gt;
    &lt;span class="n"&gt;data_type&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;list&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;logstash&amp;quot;&lt;/span&gt;

    &lt;span class="c"&gt;# We use the &amp;#39;json&amp;#39; codec here because we expect to read&lt;/span&gt;
    &lt;span class="c"&gt;# json events from redis.&lt;/span&gt;
    &lt;span class="n"&gt;codec&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tits123&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;elasticsearch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also here's a tiny script I wrote to deploy logstash onto a machine. It's not
the best, but might help provide insight to the steps necessary:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir -p /usr/local/bin/logstash /var/log/logstash /var/run/logstash /etc/logstash /etc/sysconfig
touch /var/log/logstash-shipper
wget https://download.elasticsearch.org/logstash/logstash/logstash-1.3.3-flatjar.jar -O /usr/local/bin/logstash/logstash.jar
scp -p derek@haruko.csh.rit.edu:/etc/init.d/logstash-shipper /etc/init.d/logstash-shipper
scp -p derek@haruko.csh.rit.edu:/etc/logstash/logstash-shipper.conf /etc/logstash/logstash-shipper.conf 
scp derek@haruko.csh.rit.edu:logstash-shipper /etc/sysconfig/logstash-shipper
chmod 640 /etc/sysconfig/logstash-shipper
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Derek Gonyeo</dc:creator><pubDate>Fri, 31 Jan 2014 12:00:00 -0500</pubDate><guid>tag:blog.gonyeo.com,2014-01-31:deploying-logstash.html</guid><category>personal-projects</category></item><item><title>ODD</title><link>http://blog.gonyeo.com/odd.html</link><description>&lt;p&gt;So I've been working on this one project on and off for about a year now.
&lt;a href="https://github.com/dgonyeo/odd"&gt;Project ODD&lt;/a&gt; is a general purpose one 
dimensional display powered by a Raspberry Pi. It exists to provide dynamic
lighting (ex: "I wish the lighting in here was a little cooler and brighter")
and entertainment.&lt;/p&gt;
&lt;p&gt;The pi runs some code I wrote in C that displays different "animations" on the 
LEDs. The most basic of which is to set them to a solid color. It goes up from 
there, and there are animations that light up the LEDs in a configurable chunk 
to a configurable color, and moves it back and forth (think of a cylon's eye), 
it can strobe, and I'm currently working on animations that visualize audio 
that comes in on a microphone port on this USB dongle I have. &lt;/p&gt;
&lt;p&gt;Animations can also affect each other, via modifiers that are also specified in
code. Animations can add to or subtract from each other, among other things,
much like different layers in Photoshop can influence each other. A rainbow
effect can be achieved by making three cylon eye animations, each a little more
than a third of the boards in width. Set one to be red, one green, and one blue,
and set their speeds to all be slightly differently, and a rather entertaining
rainbow will be moving across the LEDs.&lt;/p&gt;
&lt;p&gt;This is also all controllable from a website (well, it will be again once I fix
it). You can point your generic device at a web server hosted on the pi, and a
website will exist to control the behaviour of the LEDs in real time. This makes
the project very useful for dynamic lighting in a room; one time last year I
wanted to get something from my room while my roommate was in there asleep. On
my phone, I set the LEDs to be 2% brightness and red, and was able to go in
there and see, without impacting my roommate's sleep in any way.&lt;/p&gt;
&lt;p&gt;The hardware is comprised of a Raspberry Pi and a chain of these circuit boards 
I've been making. Each board contains a 
&lt;a href="http://www.ti.com/lit/ds/symlink/tlc5947.pdf"&gt;TLC5947&lt;/a&gt; from TI, 8 RGB LEDs, 
and some additional circuitry. These boards daisy chain together, and are 
controlled from the Raspberry Pi via it's GPIO pins.&lt;/p&gt;
&lt;p&gt;As the project is on going, there's a lot more I have planned I want to do. Just
need to find the time.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Derek Gonyeo</dc:creator><pubDate>Wed, 29 Jan 2014 18:10:00 -0500</pubDate><guid>tag:blog.gonyeo.com,2014-01-29:odd.html</guid><category>personal-projects</category></item><item><title>Welcome to HFOSS</title><link>http://blog.gonyeo.com/hfoss-introduction.html</link><description>&lt;p&gt;The HFOSS class finally pushed me to get my blog up and running. I'm using 
&lt;a href="docs.getpelican.com"&gt;pelican&lt;/a&gt; to generate the pages and host it in Amazon S3.
Very little work was left to be done to finish the blog, really just add 
disqus, google analytics, plug it into s3, and write some content. I had set up
most of it earlier and then never finished the project (like far too many 
things I do).&lt;/p&gt;
&lt;p&gt;It'll document my adventures and discoveries both within and outside of the 
class. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Derek Gonyeo</dc:creator><pubDate>Wed, 29 Jan 2014 18:00:00 -0500</pubDate><guid>tag:blog.gonyeo.com,2014-01-29:hfoss-introduction.html</guid><category>hfoss</category></item><item><title>This Is My Blog</title><link>http://blog.gonyeo.com/this-is-my-blog.html</link><description>&lt;p&gt;Hi! I'm Derek. I like to do technical things, and I'm going to use this blog as 
a means of documenting what I've done. This is both so I can remember how I've 
done things, and so maybe someday one of my ramblings will help someone with 
some problem they're solving. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Derek Gonyeo</dc:creator><pubDate>Wed, 29 Jan 2014 16:00:00 -0500</pubDate><guid>tag:blog.gonyeo.com,2014-01-29:this-is-my-blog.html</guid><category>non-technical</category></item></channel></rss>